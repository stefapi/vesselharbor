{
  "components": {
    "schemas": {
      "Body_login_login_post": {
        "properties": {
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          },
          "grant_type": {
            "anyOf": [
              {
                "pattern": "^password$",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "password": {
            "format": "password",
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "default": "",
            "title": "Scope",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_login_post",
        "type": "object"
      },
      "ChangePassword": {
        "properties": {
          "new_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Password"
          },
          "old_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Password"
          },
          "send_email": {
            "title": "Send Email",
            "type": "boolean"
          }
        },
        "required": [
          "old_password",
          "new_password",
          "send_email"
        ],
        "title": "ChangePassword",
        "type": "object"
      },
      "ChangeSuperadmin": {
        "properties": {
          "is_superadmin": {
            "title": "Is Superadmin",
            "type": "boolean"
          }
        },
        "required": [
          "is_superadmin"
        ],
        "title": "ChangeSuperadmin",
        "type": "object"
      },
      "ElementCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "environment_id": {
            "title": "Environment Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "subcomponent_data": {
            "additionalProperties": true,
            "title": "Subcomponent Data",
            "type": "object"
          },
          "subcomponent_type": {
            "title": "Subcomponent Type",
            "type": "string"
          }
        },
        "required": [
          "name",
          "environment_id",
          "subcomponent_type",
          "subcomponent_data"
        ],
        "title": "ElementCreate",
        "type": "object"
      },
      "ElementUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "required": [
          "name",
          "description"
        ],
        "title": "ElementUpdate",
        "type": "object"
      },
      "EmptyData": {
        "description": "Empty data structure for responses with no data",
        "properties": {},
        "title": "EmptyData",
        "type": "object"
      },
      "EnvironmentCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "integer"
          }
        },
        "required": [
          "name",
          "organization_id"
        ],
        "title": "EnvironmentCreate",
        "type": "object"
      },
      "GroupCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "integer"
          }
        },
        "required": [
          "name",
          "organization_id"
        ],
        "title": "GroupCreate",
        "type": "object"
      },
      "GroupUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "title": "GroupUpdate",
        "type": "object"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "LoginData": {
        "description": "Data structure for login response",
        "properties": {
          "token_type": {
            "title": "Token Type",
            "type": "string"
          }
        },
        "required": [
          "token_type"
        ],
        "title": "LoginData",
        "type": "object"
      },
      "LoginResponse": {
        "description": "Response schema for login endpoint",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LoginData"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "LoginResponse",
        "type": "object"
      },
      "LogoutResponse": {
        "description": "Response schema for logout endpoint",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmptyData"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "LogoutResponse",
        "type": "object"
      },
      "MeResponse": {
        "description": "Response schema for me/profile endpoint",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserOut"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "MeResponse",
        "type": "object"
      },
      "OrganizationCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "maxLength": 1024,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "name": {
            "maxLength": 80,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "OrganizationCreate",
        "type": "object"
      },
      "OrganizationUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "maxLength": 1024,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "name": {
            "maxLength": 80,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "OrganizationUpdate",
        "type": "object"
      },
      "PasswordReset": {
        "properties": {
          "new_password": {
            "title": "New Password",
            "type": "string"
          },
          "token": {
            "title": "Token",
            "type": "string"
          }
        },
        "required": [
          "token",
          "new_password"
        ],
        "title": "PasswordReset",
        "type": "object"
      },
      "PasswordResetRequest": {
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "title": "PasswordResetRequest",
        "type": "object"
      },
      "PasswordResetResponse": {
        "description": "Response schema for password reset endpoints",
        "properties": {
          "data": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "PasswordResetResponse",
        "type": "object"
      },
      "PolicyCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "organization_id": {
            "title": "Organization Id",
            "type": "integer"
          }
        },
        "required": [
          "name",
          "organization_id"
        ],
        "title": "PolicyCreate",
        "type": "object"
      },
      "PolicyUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "title": "PolicyUpdate",
        "type": "object"
      },
      "RefreshTokenData": {
        "description": "Data structure for refresh token response",
        "properties": {
          "token_type": {
            "title": "Token Type",
            "type": "string"
          }
        },
        "required": [
          "token_type"
        ],
        "title": "RefreshTokenData",
        "type": "object"
      },
      "RefreshTokenResponse": {
        "description": "Response schema for refresh token endpoint",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RefreshTokenData"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "RefreshTokenResponse",
        "type": "object"
      },
      "RuleCreate": {
        "properties": {
          "access_schedule": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Schedule"
          },
          "element_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Element Id"
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id"
          },
          "function_id": {
            "title": "Function Id",
            "type": "integer"
          },
          "policy_id": {
            "title": "Policy Id",
            "type": "integer"
          }
        },
        "required": [
          "policy_id",
          "function_id"
        ],
        "title": "RuleCreate",
        "type": "object"
      },
      "RuleUpdate": {
        "properties": {
          "access_schedule": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Schedule"
          },
          "element_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Element Id"
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id"
          },
          "function_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Id"
          }
        },
        "title": "RuleUpdate",
        "type": "object"
      },
      "TagCreate": {
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "type": "integer"
          },
          "value": {
            "maxLength": 80,
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "value",
          "organization_id"
        ],
        "title": "TagCreate",
        "type": "object"
      },
      "TagOut": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "id",
          "value"
        ],
        "title": "TagOut",
        "type": "object"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "username",
          "first_name",
          "last_name",
          "email",
          "password"
        ],
        "title": "UserCreate",
        "type": "object"
      },
      "UserOut": {
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "is_superadmin": {
            "title": "Is Superadmin",
            "type": "boolean"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "tags": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/TagOut"
            },
            "title": "Tags",
            "type": "array"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "first_name",
          "last_name",
          "email",
          "is_superadmin"
        ],
        "title": "UserOut",
        "type": "object"
      },
      "UserUpdate": {
        "properties": {
          "email": {
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "username",
          "email"
        ],
        "title": "UserUpdate",
        "type": "object"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearerOrKey": {
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/login"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "email": "votre.email@example.com",
      "name": "Votre Nom"
    },
    "description": "Backend FastAPI/SQLite (compatible PostgreSQL) pour la gestion des utilisateurs, environnements, groupes et permissions.\n\nA service wich deploys e home web platform on a Raspberry Pi or a VPS\nThis is usable for debian, Ubuntu systems. other Platforms are planned\n\n## API Overview\nThis API provides 108 operations across 78 endpoints. Supports DELETE, GET, POST, PUT HTTP methods.\n\n## Authentication\nMost endpoints (93%) require authentication.\n\n## Data Formats\nSupports the following content types: application/json, application/x-www-form-urlencoded.\n\n## Response Codes\nSuccess responses: 200. Error responses: 400, 401, 403, 404, 409, 418, 422, 500, 503.\n\n## Data Models\nIncludes 31 data model definitions for request and response validation.\n\n## Error Handling\nThe API returns standardized error responses with appropriate HTTP status codes and detailed error messages.",
    "license": {
      "name": "Apache",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "title": "App API",
    "version": "0.1.0",
    "x-generated-at": "2025-07-05T17:06:05.849277",
    "x-generator": "app OpenAPI Generator"
  },
  "openapi": "3.1.0",
  "paths": {
    "/audit-logs/": {
      "get": {
        "description": "Liste les logs d'audit avec pagination et filtrage par action et user_id (accessible uniquement par superadmin).",
        "operationId": "list_audit_logs_audit_logs__get",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Action"
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Audit Logs Audit Logs  Get",
                  "type": "object"
                }
              }
            },
            "description": "Logs d'audit récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Non autorisé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les logs d'audit",
        "tags": [
          "audit_logs"
        ]
      }
    },
    "/coffee/": {
      "get": {
        "description": "Returns a 418 I'm a teapot status code, as per RFC 2324.",
        "operationId": "im_a_teapot_coffee__get",
        "responses": {
          "418": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Im A Teapot Coffee  Get",
                  "type": "object"
                }
              }
            },
            "description": "I'm a teapot"
          }
        },
        "summary": "I'm a teapot",
        "tags": [
          "coffee"
        ]
      }
    },
    "/elements/{element_id}": {
      "delete": {
        "description": "Supprime un élément donné.",
        "operationId": "delete_element_elements__element_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "element_id",
            "required": true,
            "schema": {
              "title": "Element Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete Element Elements  Element Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Élément supprimé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Élément non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer un élément",
        "tags": [
          "elements"
        ]
      },
      "get": {
        "description": "Renvoie les informations d'un élément spécifique.",
        "operationId": "get_element_elements__element_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "element_id",
            "required": true,
            "schema": {
              "title": "Element Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Element Elements  Element Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Élément récupéré avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Élément non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Récupérer un élément",
        "tags": [
          "elements"
        ]
      },
      "put": {
        "description": "Modifie les informations d'un élément.",
        "operationId": "update_element_elements__element_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "element_id",
            "required": true,
            "schema": {
              "title": "Element Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Update Element Elements  Element Id  Put",
                  "type": "object"
                }
              }
            },
            "description": "Élément mis à jour avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Élément non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Mettre à jour un élément",
        "tags": [
          "elements"
        ]
      }
    },
    "/elements/{element_id}/tags": {
      "get": {
        "description": "Récupère tous les tags associés à un élément.",
        "operationId": "list_element_tags_elements__element_id__tags_get",
        "parameters": [
          {
            "in": "path",
            "name": "element_id",
            "required": true,
            "schema": {
              "title": "Element Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Element Tags Elements  Element Id  Tags Get",
                  "type": "object"
                }
              }
            },
            "description": "Tags récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Élément non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les tags d'un élément",
        "tags": [
          "elements"
        ]
      }
    },
    "/elements/{element_id}/tags/{tag_id}": {
      "delete": {
        "description": "Retire l'association entre un tag et un élément.",
        "operationId": "remove_tag_from_element_elements__element_id__tags__tag_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "element_id",
            "required": true,
            "schema": {
              "title": "Element Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove Tag From Element Elements  Element Id  Tags  Tag Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Tag retiré de l'élément avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Élément ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un tag d'un élément",
        "tags": [
          "elements"
        ]
      },
      "post": {
        "description": "Associe un tag existant à un élément.",
        "operationId": "add_tag_to_element_elements__element_id__tags__tag_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "element_id",
            "required": true,
            "schema": {
              "title": "Element Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add Tag To Element Elements  Element Id  Tags  Tag Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Tag ajouté à l'élément avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Élément ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Ajouter un tag à un élément",
        "tags": [
          "elements"
        ]
      }
    },
    "/elements/{environment_id}": {
      "post": {
        "description": "Crée un élément dans un environnement donné.",
        "operationId": "create_element_elements__environment_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create Element Elements  Environment Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Élément créé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer un élément",
        "tags": [
          "elements"
        ]
      }
    },
    "/environments": {
      "get": {
        "description": "Liste les environnements filtrés par nom ou organisation (superadmins voient tout, les autres uniquement ce qu'ils ont le droit de lire).",
        "operationId": "list_environments_environments_get",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "in": "query",
            "name": "organization_name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "description": "Environnement de production",
                      "elements": [],
                      "groups_with_access": [],
                      "id": 1,
                      "name": "Production",
                      "organization": {
                        "description": "Organisation principale",
                        "id": 1,
                        "name": "ACME Corp"
                      },
                      "organization_id": 1,
                      "rules": [],
                      "users": []
                    },
                    {
                      "description": "Environnement de développement",
                      "elements": [],
                      "groups_with_access": [],
                      "id": 2,
                      "name": "Développement",
                      "organization": {
                        "description": "Organisation principale",
                        "id": 1,
                        "name": "ACME Corp"
                      },
                      "organization_id": 1,
                      "rules": [],
                      "users": []
                    }
                  ],
                  "message": "Liste des environnements récupérée",
                  "status": "success"
                },
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Environments Environments Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des environnements récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les environnements",
        "tags": [
          "environments"
        ]
      },
      "post": {
        "description": "Crée un environnement rattaché à une organisation. Associe une policy d’admin au créateur si nécessaire.",
        "operationId": "create_environment_environments_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create Environment Environments Post",
                  "type": "object"
                }
              }
            },
            "description": "Environnement créé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "description": "La fonction 'admin' est manquante"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/generate-name": {
      "get": {
        "description": "Génère un nom unique à partir d'un animal ou d'un adjectif.",
        "operationId": "generate_environment_codename_environments_generate_name_get",
        "parameters": [
          {
            "in": "query",
            "name": "prefix_length",
            "required": false,
            "schema": {
              "default": 0,
              "maximum": 6,
              "minimum": 0,
              "title": "Prefix Length",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "use_adjective",
            "required": false,
            "schema": {
              "default": true,
              "title": "Use Adjective",
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "use_adverb",
            "required": false,
            "schema": {
              "default": false,
              "title": "Use Adverb",
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "suffix_length",
            "required": false,
            "schema": {
              "default": 0,
              "maximum": 6,
              "minimum": 0,
              "title": "Suffix Length",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "separator",
            "required": false,
            "schema": {
              "default": "-",
              "maxLength": 2,
              "title": "Separator",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "style",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Style"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Generate Environment Codename Environments Generate Name Get",
                  "type": "object"
                }
              }
            },
            "description": "Nom généré avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Générer un nom aléatoire",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}": {
      "delete": {
        "description": "Supprime un environnement si l’utilisateur a les droits requis.",
        "operationId": "delete_environment_environments__environment_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete Environment Environments  Environment Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Environnement supprimé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer un environnement",
        "tags": [
          "environments"
        ]
      },
      "get": {
        "description": "Renvoie les détails d’un environnement si l’utilisateur y a accès.",
        "operationId": "get_environment_environments__environment_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Environment Environments  Environment Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Environnement récupéré avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Détail d’un environnement",
        "tags": [
          "environments"
        ]
      },
      "put": {
        "description": "Met à jour un environnement s’il existe et si l’utilisateur a les droits.",
        "operationId": "update_environment_environments__environment_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Update Environment Environments  Environment Id  Put",
                  "type": "object"
                }
              }
            },
            "description": "Environnement mis à jour avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Mettre à jour un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/applications": {
      "get": {
        "description": "Liste les éléments de type application dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_applications_environments__environment_id__applications_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Applications Environments  Environment Id  Applications Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des applications récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les applications d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/container-clusters": {
      "get": {
        "description": "Liste les éléments de type cluster de conteneur dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_container_clusters_environments__environment_id__container_clusters_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Container Clusters Environments  Environment Id  Container Clusters Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des clusters de conteneur récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les clusters de conteneur d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/container-nodes": {
      "get": {
        "description": "Liste les éléments de type noeud de conteneur dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_container_nodes_environments__environment_id__container_nodes_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Container Nodes Environments  Environment Id  Container Nodes Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des noeuds de conteneur récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les noeuds de conteneur d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/domains": {
      "get": {
        "description": "Liste les éléments de type domaine dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_domains_environments__environment_id__domains_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Domains Environments  Environment Id  Domains Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des domaines récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les domaines d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/elements": {
      "get": {
        "description": "Liste les éléments d'un environnement avec pagination et filtrage par nom et type.",
        "operationId": "list_elements_environments__environment_id__elements_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "description": "Type d'élément à filtrer (network, vm, storage_pool, volume, domain, container_node, container_cluster, stack, application)",
            "in": "query",
            "name": "element_type",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Type d'élément à filtrer (network, vm, storage_pool, volume, domain, container_node, container_cluster, stack, application)",
              "title": "Element Type"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Elements Environments  Environment Id  Elements Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des éléments récupérée avec succès"
          },
          "400": {
            "description": "Type d'élément invalide"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les éléments d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/networks": {
      "get": {
        "description": "Liste les éléments de type réseau dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_networks_environments__environment_id__networks_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Networks Environments  Environment Id  Networks Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des réseaux récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les réseaux d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/physical-hosts": {
      "get": {
        "description": "Renvoie la liste des hôtes physiques associés à un environnement si l'utilisateur y a accès.",
        "operationId": "get_environment_physical_hosts_environments__environment_id__physical_hosts_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Environment Physical Hosts Environments  Environment Id  Physical Hosts Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des hôtes physiques récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Liste des hôtes physiques d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/stacks": {
      "get": {
        "description": "Liste les éléments de type stack dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_stacks_environments__environment_id__stacks_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Stacks Environments  Environment Id  Stacks Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des stacks récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les stacks d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/storage-pools": {
      "get": {
        "description": "Liste les éléments de type pool de stockage dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_storage_pools_environments__environment_id__storage_pools_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Storage Pools Environments  Environment Id  Storage Pools Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des pools de stockage récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les pools de stockage d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/tags": {
      "get": {
        "description": "Récupère tous les tags associés à un environnement.",
        "operationId": "list_environment_tags_environments__environment_id__tags_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Environment Tags Environments  Environment Id  Tags Get",
                  "type": "object"
                }
              }
            },
            "description": "Tags récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les tags d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/tags/{tag_id}": {
      "delete": {
        "description": "Retire l'association entre un tag et un environnement.",
        "operationId": "remove_tag_from_environment_environments__environment_id__tags__tag_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove Tag From Environment Environments  Environment Id  Tags  Tag Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Tag retiré de l'environnement avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un tag d'un environnement",
        "tags": [
          "environments"
        ]
      },
      "post": {
        "description": "Associe un tag existant à un environnement.",
        "operationId": "add_tag_to_environment_environments__environment_id__tags__tag_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add Tag To Environment Environments  Environment Id  Tags  Tag Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Tag ajouté à l'environnement avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Ajouter un tag à un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/users": {
      "get": {
        "description": "Renvoie tous les utilisateurs ayant accès à un environnement via une policy (via les rules).",
        "operationId": "get_environment_users_environments__environment_id__users_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Environment Users Environments  Environment Id  Users Get",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateurs récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Utilisateurs liés à un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/vms": {
      "get": {
        "description": "Liste les éléments de type machine virtuelle dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_vms_environments__environment_id__vms_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Vms Environments  Environment Id  Vms Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des machines virtuelles récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les machines virtuelles d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{environment_id}/volumes": {
      "get": {
        "description": "Liste les éléments de type volume dans un environnement avec pagination et filtrage par nom.",
        "operationId": "list_volumes_environments__environment_id__volumes_get",
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "title": "Environment Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Volumes Environments  Environment Id  Volumes Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des volumes récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Environnement non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les volumes d'un environnement",
        "tags": [
          "environments"
        ]
      }
    },
    "/functions": {
      "get": {
        "description": "Renvoie toutes les fonctions si l'utilisateur a les droits requis.",
        "operationId": "list_functions_functions_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Functions Functions Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des fonctions récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les fonctions",
        "tags": [
          "functions"
        ]
      }
    },
    "/functions/{function_id}": {
      "get": {
        "description": "Renvoie les informations d'une fonction spécifique.",
        "operationId": "get_function_functions__function_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "function_id",
            "required": true,
            "schema": {
              "title": "Function Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Function Functions  Function Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Fonction récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Fonction non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Récupérer une fonction",
        "tags": [
          "functions"
        ]
      }
    },
    "/groups": {
      "get": {
        "description": "Récupère la liste complète de tous les groupes dans le système (réservé aux superadmins)",
        "operationId": "list_all_groups_groups_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List All Groups Groups Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste de tous les groupes récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante - réservé aux superadmins"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister tous les groupes",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/organization/{org_id}": {
      "get": {
        "description": "Récupère tous les groupes appartenant à une organisation spécifique",
        "operationId": "list_groups_by_org_groups_organization__org_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Groups By Org Groups Organization  Org Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des groupes de l'organisation récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les groupes d'une organisation",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{group_id}": {
      "delete": {
        "description": "Supprime un groupe existant et toutes ses associations",
        "operationId": "delete_group_groups__group_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete Group Groups  Group Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Groupe supprimé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante ou seul un superadmin peut supprimer les groupes 'admin' et 'editors'"
          },
          "404": {
            "description": "Groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer un groupe",
        "tags": [
          "groups"
        ]
      },
      "get": {
        "description": "Récupère les détails d'un groupe spécifique par son identifiant",
        "operationId": "get_group_groups__group_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Group Groups  Group Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Groupe récupéré avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Détail d'un groupe",
        "tags": [
          "groups"
        ]
      },
      "put": {
        "description": "Met à jour les informations d'un groupe existant",
        "operationId": "update_group_groups__group_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Update Group Groups  Group Id  Put",
                  "type": "object"
                }
              }
            },
            "description": "Groupe mis à jour avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Mettre à jour un groupe",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{group_id}/policy": {
      "get": {
        "description": "Récupère la liste de toutes les politiques associées à un groupe spécifique",
        "operationId": "list_group_policies_groups__group_id__policy_get",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Group Policies Groups  Group Id  Policy Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des policies du groupe récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les policies d'un groupe",
        "tags": [
          "groups"
        ]
      },
      "post": {
        "description": "Associe une politique spécifique à un groupe",
        "operationId": "assign_policy_groups__group_id__policy_post",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Assign Policy Groups  Group Id  Policy Post",
                  "type": "object"
                }
              }
            },
            "description": "Policy associée au groupe avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe ou policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Associer une policy",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{group_id}/policy/{policy_id}": {
      "delete": {
        "description": "Retire une politique spécifique d'un groupe",
        "operationId": "remove_policy_groups__group_id__policy__policy_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove Policy Groups  Group Id  Policy  Policy Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Policy retirée du groupe avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe ou policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer une policy",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{group_id}/tags": {
      "get": {
        "description": "Récupère la liste de tous les tags associés à un groupe spécifique",
        "operationId": "list_group_tags_groups__group_id__tags_get",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Group Tags Groups  Group Id  Tags Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des tags du groupe récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les tags d'un groupe",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{group_id}/tags/{tag_id}": {
      "delete": {
        "description": "Retire un tag spécifique d'un groupe",
        "operationId": "remove_tag_from_group_groups__group_id__tags__tag_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove Tag From Group Groups  Group Id  Tags  Tag Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Tag retiré du groupe avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un tag d'un groupe",
        "tags": [
          "groups"
        ]
      },
      "post": {
        "description": "Associe un tag spécifique à un groupe",
        "operationId": "add_tag_to_group_groups__group_id__tags__tag_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add Tag To Group Groups  Group Id  Tags  Tag Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Tag ajouté au groupe avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Ajouter un tag à un groupe",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{group_id}/users": {
      "get": {
        "description": "Récupère la liste de tous les utilisateurs appartenant à un groupe spécifique",
        "operationId": "list_group_users_groups__group_id__users_get",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Group Users Groups  Group Id  Users Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des utilisateurs du groupe récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les utilisateurs d'un groupe",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{group_id}/users/{user_id}": {
      "delete": {
        "description": "Retire un utilisateur spécifique d'un groupe",
        "operationId": "remove_user_groups__group_id__users__user_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove User Groups  Group Id  Users  User Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur retiré du groupe avec succès ou n'était pas dans le groupe"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe ou utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un utilisateur",
        "tags": [
          "groups"
        ]
      },
      "post": {
        "description": "Ajoute un utilisateur spécifique à un groupe",
        "operationId": "assign_user_groups__group_id__users__user_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Assign User Groups  Group Id  Users  User Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur ajouté au groupe avec succès ou déjà présent dans le groupe"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Groupe ou utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Associer un utilisateur",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{organization_id}": {
      "post": {
        "description": "Crée un nouveau groupe dans l'organisation spécifiée",
        "operationId": "create_group_groups__organization_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {
              "title": "Organization Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create Group Groups  Organization Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Groupe créé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer un groupe",
        "tags": [
          "groups"
        ]
      }
    },
    "/health/": {
      "get": {
        "description": "Returns a 200 OK status code if the service is running. Used for Kubernetes/Docker health checks.",
        "operationId": "health_check_health__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Health Check Health  Get",
                  "type": "object"
                }
              }
            },
            "description": "Service is healthy"
          },
          "503": {
            "description": "Service is unhealthy"
          }
        },
        "summary": "Health Check",
        "tags": [
          "health"
        ]
      }
    },
    "/login": {
      "post": {
        "description": "Authentifie un utilisateur avec son email et mot de passe et retourne un token d'accès",
        "operationId": "login_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            },
            "description": "Login réussi"
          },
          "400": {
            "description": "Email ou mot de passe incorrect"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Authentifier un utilisateur"
      }
    },
    "/logout": {
      "post": {
        "description": "Déconnecte l'utilisateur en supprimant les cookies d'authentification",
        "operationId": "logout_logout_post",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            },
            "description": "Déconnexion réussie"
          }
        },
        "summary": "Se déconnecter"
      }
    },
    "/me": {
      "get": {
        "description": "Récupère les informations du profil de l'utilisateur actuellement connecté",
        "operationId": "get_me_me_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            },
            "description": "Information sur mon profil récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié ou token invalide"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Profil utilisateur connecté"
      }
    },
    "/organizations": {
      "get": {
        "description": "Récupère la liste des organisations auxquelles l'utilisateur a accès",
        "operationId": "list_organizations_organizations_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Organizations Organizations Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des organisations récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les organisations",
        "tags": [
          "organizations"
        ]
      },
      "post": {
        "description": "Crée une nouvelle organisation et configure les groupes et politiques par défaut",
        "operationId": "create_organization_organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create Organization Organizations Post",
                  "type": "object"
                }
              }
            },
            "description": "Organisation créée avec succès"
          },
          "400": {
            "description": "Une organisation avec ce nom existe déjà"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Vous êtes déjà administrateur d'une organization"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "description": "Erreur serveur - fonction admin non trouvée"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}": {
      "delete": {
        "description": "Supprime une organisation existante et toutes ses données associées",
        "operationId": "delete_organization_organizations__org_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete Organization Organizations  Org Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Organisation supprimée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante ou utilisateurs appartenant à d'autres organisations"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer une organisation",
        "tags": [
          "organizations"
        ]
      },
      "get": {
        "description": "Récupère les détails d'une organisation spécifique",
        "operationId": "get_organization_organizations__org_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Organization Organizations  Org Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Détails de l'organisation récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Détail d'une organisation",
        "tags": [
          "organizations"
        ]
      },
      "put": {
        "description": "Met à jour les informations d'une organisation existante",
        "operationId": "update_organization_organizations__org_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Update Organization Organizations  Org Id  Put",
                  "type": "object"
                }
              }
            },
            "description": "Organisation mise à jour avec succès"
          },
          "400": {
            "description": "Une organisation avec ce nom existe déjà"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Mettre à jour une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}/elements": {
      "get": {
        "description": "Récupère tous les éléments d'une organisation auxquels l'utilisateur a accès, avec pagination et filtrage par nom.",
        "operationId": "list_organization_elements_organizations__org_id__elements_get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Organization Elements Organizations  Org Id  Elements Get",
                  "type": "object"
                }
              }
            },
            "description": "Éléments de l'organisation récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les éléments d'une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}/environments": {
      "get": {
        "description": "Récupère tous les environnements associés à une organisation",
        "operationId": "list_organization_environments_organizations__org_id__environments_get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Organization Environments Organizations  Org Id  Environments Get",
                  "type": "object"
                }
              }
            },
            "description": "Environnements de l'organisation récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les environnements d'une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}/groups": {
      "get": {
        "description": "Récupère tous les groupes associés à une organisation",
        "operationId": "list_organization_groups_organizations__org_id__groups_get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Organization Groups Organizations  Org Id  Groups Get",
                  "type": "object"
                }
              }
            },
            "description": "Groupes de l'organisation récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les groupes d'une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}/policies": {
      "get": {
        "description": "Récupère toutes les politiques associées à une organisation",
        "operationId": "list_organization_policies_organizations__org_id__policies_get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Organization Policies Organizations  Org Id  Policies Get",
                  "type": "object"
                }
              }
            },
            "description": "Politiques de l'organisation récupérées avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les politiques d'une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}/tags": {
      "get": {
        "description": "Récupère tous les tags associés à une organisation",
        "operationId": "list_organization_tags_organizations__org_id__tags_get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Organization Tags Organizations  Org Id  Tags Get",
                  "type": "object"
                }
              }
            },
            "description": "Tags de l'organisation récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les tags d'une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}/users": {
      "get": {
        "description": "Récupère tous les utilisateurs ayant accès à une organisation spécifique.",
        "operationId": "list_organization_users_organizations__org_id__users_get",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Organization Users Organizations  Org Id  Users Get",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateurs de l'organisation récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Organisation non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les utilisateurs d'une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{org_id}/users/{user_id}": {
      "delete": {
        "description": "Retire un utilisateur spécifié d'une organisation",
        "operationId": "remove_user_from_organization_organizations__org_id__users__user_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove User From Organization Organizations  Org Id  Users  User Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur retiré de l'organisation avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Organisation ou utilisateur introuvable"
          },
          "409": {
            "description": "Impossible de retirer le dernier administrateur de l'organisation"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un utilisateur d'une organisation",
        "tags": [
          "organizations"
        ]
      },
      "post": {
        "description": "Ajoute un utilisateur spécifié à une organisation",
        "operationId": "add_user_to_organization_organizations__org_id__users__user_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "title": "Org Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add User To Organization Organizations  Org Id  Users  User Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur ajouté à l'organisation avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Organisation ou utilisateur introuvable"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Ajouter un utilisateur à une organisation",
        "tags": [
          "organizations"
        ]
      }
    },
    "/policies": {
      "get": {
        "description": "Récupère la liste des policies pour une organisation donnée avec pagination.",
        "operationId": "list_policies_policies_get",
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "required": true,
            "schema": {
              "title": "Organization Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Policies Policies Get",
                  "type": "object"
                }
              }
            },
            "description": "Policies récupérées avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les policies",
        "tags": [
          "policies"
        ]
      },
      "post": {
        "description": "Crée une nouvelle policy dans l'organisation spécifiée.",
        "operationId": "create_policy_policies_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create Policy Policies Post",
                  "type": "object"
                }
              }
            },
            "description": "Policy créée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer une policy",
        "tags": [
          "policies"
        ]
      }
    },
    "/policies/{policy_id}": {
      "delete": {
        "description": "Supprime définitivement une policy existante.",
        "operationId": "delete_policy_policies__policy_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete Policy Policies  Policy Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Policy supprimée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer une policy",
        "tags": [
          "policies"
        ]
      },
      "get": {
        "description": "Récupère les détails d'une policy spécifique par son ID.",
        "operationId": "get_policy_policies__policy_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Policy Policies  Policy Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Policy récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Obtenir une policy",
        "tags": [
          "policies"
        ]
      },
      "put": {
        "description": "Modifie les informations d'une policy existante.",
        "operationId": "update_policy_policies__policy_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Update Policy Policies  Policy Id  Put",
                  "type": "object"
                }
              }
            },
            "description": "Policy mise à jour avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Mettre à jour une policy",
        "tags": [
          "policies"
        ]
      }
    },
    "/policies/{policy_id}/groups": {
      "get": {
        "description": "Récupère la liste de tous les groupes associés à une policy spécifique.",
        "operationId": "list_policy_groups_policies__policy_id__groups_get",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Policy Groups Policies  Policy Id  Groups Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des groupes de la policy récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les groupes d'une policy",
        "tags": [
          "policies"
        ]
      }
    },
    "/policies/{policy_id}/groups/{group_id}": {
      "delete": {
        "description": "Dissocie un groupe d'une policy, retirant ainsi les permissions associées à tous les membres du groupe.",
        "operationId": "remove_group_policies__policy_id__groups__group_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove Group Policies  Policy Id  Groups  Group Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Groupe retiré de la policy avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy ou groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un groupe d'une policy",
        "tags": [
          "policies"
        ]
      },
      "post": {
        "description": "Associe un groupe à une policy, accordant ainsi les permissions définies à tous les membres du groupe.",
        "operationId": "add_group_policies__policy_id__groups__group_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "Group Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add Group Policies  Policy Id  Groups  Group Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Groupe ajouté à la policy avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy ou groupe non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Ajouter un groupe à une policy",
        "tags": [
          "policies"
        ]
      }
    },
    "/policies/{policy_id}/rules": {
      "get": {
        "description": "Récupère toutes les règles associées à une politique spécifique",
        "operationId": "list_rules_policies__policy_id__rules_get",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Rules Policies  Policy Id  Rules Get",
                  "type": "object"
                }
              }
            },
            "description": "Règles récupérées avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les règles d'une politique",
        "tags": [
          "policies"
        ]
      }
    },
    "/policies/{policy_id}/tags/{tag_id}": {
      "delete": {
        "description": "Dissocie un tag d'une policy, retirant ainsi l'application de la policy aux éléments portant ce tag.",
        "operationId": "remove_tag_policies__policy_id__tags__tag_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove Tag Policies  Policy Id  Tags  Tag Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Tag retiré de la policy avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un tag d'une policy",
        "tags": [
          "policies"
        ]
      },
      "post": {
        "description": "Associe un tag à une policy, permettant d'appliquer la policy à tous les éléments portant ce tag.",
        "operationId": "add_tag_policies__policy_id__tags__tag_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add Tag Policies  Policy Id  Tags  Tag Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Tag ajouté à la policy avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy ou tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Ajouter un tag à une policy",
        "tags": [
          "policies"
        ]
      }
    },
    "/policies/{policy_id}/users": {
      "get": {
        "description": "Récupère la liste de tous les utilisateurs associés à une policy spécifique.",
        "operationId": "list_policy_users_policies__policy_id__users_get",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Policy Users Policies  Policy Id  Users Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des utilisateurs de la policy récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les utilisateurs d'une policy",
        "tags": [
          "policies"
        ]
      }
    },
    "/policies/{policy_id}/users/{user_id}": {
      "delete": {
        "description": "Dissocie un utilisateur d'une policy, lui retirant ainsi les permissions associées.",
        "operationId": "remove_user_policies__policy_id__users__user_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove User Policies  Policy Id  Users  User Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur retiré de la policy avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy ou user non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Retirer un utilisateur d'une policy",
        "tags": [
          "policies"
        ]
      },
      "post": {
        "description": "Associe un utilisateur spécifique à une policy pour lui accorder les permissions définies.",
        "operationId": "add_user_policies__policy_id__users__user_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add User Policies  Policy Id  Users  User Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur ajouté à la policy avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy ou user non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Ajouter un utilisateur à une policy",
        "tags": [
          "policies"
        ]
      }
    },
    "/refresh-token": {
      "post": {
        "description": "Renouvelle le token d'accès à partir d'un refresh token valide",
        "operationId": "refresh_token_refresh_token_post",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            },
            "description": "Token renouvelé avec succès"
          },
          "400": {
            "description": "Refresh token invalide ou expiré, ou n'est pas un refresh token"
          }
        },
        "summary": "Renouveler le token"
      }
    },
    "/rules": {
      "post": {
        "description": "Crée une nouvelle règle associée à une politique",
        "operationId": "create_rule_rules_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create Rule Rules Post",
                  "type": "object"
                }
              }
            },
            "description": "Règle créée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Policy non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer une règle",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{rule_id}": {
      "delete": {
        "description": "Supprime une règle existante",
        "operationId": "delete_rule_rules__rule_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "title": "Rule Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete Rule Rules  Rule Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Règle supprimée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Règle non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer une règle",
        "tags": [
          "rules"
        ]
      },
      "get": {
        "description": "Récupère les détails d'une règle spécifique",
        "operationId": "get_rule_rules__rule_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "title": "Rule Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Rule Rules  Rule Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Règle récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Règle non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Détail d'une règle",
        "tags": [
          "rules"
        ]
      },
      "put": {
        "description": "Met à jour une règle existante",
        "operationId": "update_rule_rules__rule_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "title": "Rule Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Update Rule Rules  Rule Id  Put",
                  "type": "object"
                }
              }
            },
            "description": "Règle mise à jour avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Règle non trouvée"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Mettre à jour une règle",
        "tags": [
          "rules"
        ]
      }
    },
    "/tags": {
      "get": {
        "description": "Renvoie la liste de tous les tags si l'utilisateur a les droits sur leur organisation.",
        "operationId": "list_tags_tags_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Tags Tags Get",
                  "type": "object"
                }
              }
            },
            "description": "Liste des tags récupérée avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister tous les tags",
        "tags": [
          "tags"
        ]
      },
      "post": {
        "description": "Crée un nouveau tag. L'utilisateur doit avoir les droits sur une organisation spécifique.",
        "operationId": "create_tag_tags_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create Tag Tags Post",
                  "type": "object"
                }
              }
            },
            "description": "Tag créé avec succès"
          },
          "400": {
            "description": "Tag existant"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer un tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tag_id}": {
      "delete": {
        "description": "Supprime un tag s'il est autorisé.",
        "operationId": "delete_tag_tags__tag_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete Tag Tags  Tag Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Tag supprimé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer un tag",
        "tags": [
          "tags"
        ]
      },
      "get": {
        "description": "Renvoie les informations d'un tag spécifique si l'utilisateur a les droits requis.",
        "operationId": "get_tag_tags__tag_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Tag Tags  Tag Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Tag récupéré avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Récupérer un tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tag_id}/elements": {
      "get": {
        "description": "Renvoie les éléments associés à un tag.",
        "operationId": "get_tag_elements_tags__tag_id__elements_get",
        "parameters": [
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Tag Elements Tags  Tag Id  Elements Get",
                  "type": "object"
                }
              }
            },
            "description": "Éléments récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Éléments liés à un tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tag_id}/environments": {
      "get": {
        "description": "Renvoie les environnements associés à un tag.",
        "operationId": "get_tag_environments_tags__tag_id__environments_get",
        "parameters": [
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Tag Environments Tags  Tag Id  Environments Get",
                  "type": "object"
                }
              }
            },
            "description": "Environnements récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Environnements liés à un tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tag_id}/groups": {
      "get": {
        "description": "Renvoie les groupes associés à un tag.",
        "operationId": "get_tag_groups_tags__tag_id__groups_get",
        "parameters": [
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Tag Groups Tags  Tag Id  Groups Get",
                  "type": "object"
                }
              }
            },
            "description": "Groupes récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Groupes liés à un tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tag_id}/policies": {
      "get": {
        "description": "Renvoie les policies associées à un tag.",
        "operationId": "get_tag_policies_tags__tag_id__policies_get",
        "parameters": [
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Tag Policies Tags  Tag Id  Policies Get",
                  "type": "object"
                }
              }
            },
            "description": "Policies récupérées avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Policies liées à un tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tag_id}/users": {
      "get": {
        "description": "Renvoie les utilisateurs associés à un tag.",
        "operationId": "get_tag_users_tags__tag_id__users_get",
        "parameters": [
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get Tag Users Tags  Tag Id  Users Get",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateurs récupérés avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Tag non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Utilisateurs liés à un tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Récupère la liste des utilisateurs avec pagination et filtrage optionnel par email.",
        "operationId": "list_users_users_get",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Skip",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List Users Users Get",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur créé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les utilisateurs",
        "tags": [
          "users"
        ]
      },
      "post": {
        "description": "Crée un nouvel utilisateur en mode libre dans le système. Le premier utilisateur créé devient automatiquement superadmin.",
        "operationId": "register_user_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Register User Users Post",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur créé avec succès"
          },
          "400": {
            "description": "Email déjà enregistré"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Créer un utilisateur en mode libre",
        "tags": [
          "users"
        ]
      }
    },
    "/users/reset_password": {
      "post": {
        "description": "Réinitialise le mot de passe d'un utilisateur à l'aide d'un token de réinitialisation valide",
        "operationId": "reset_password_users_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetResponse"
                }
              }
            },
            "description": "Mot de passe réinitialisé avec succès"
          },
          "400": {
            "description": "Token invalide, expiré ou incorrect"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Réinitialiser le mot de passe"
      }
    },
    "/users/reset_password_request": {
      "post": {
        "description": "Envoie un email contenant un lien de réinitialisation de mot de passe à l'adresse email fournie",
        "operationId": "reset_password_request_users_reset_password_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetResponse"
                }
              }
            },
            "description": "Lien de réinitialisation envoyé par email (si l'email est enregistré)"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Demander une réinitialisation de mot de passe"
      }
    },
    "/users/{organization_id}": {
      "post": {
        "description": "Crée un nouvel utilisateur dans le système. Il est rattaché à une Organization",
        "operationId": "create_user_users__organization_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {
              "title": "Organization Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Create User Users  Organization Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur créé avec succès"
          },
          "400": {
            "description": "Email déjà enregistré"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Créer un utilisateur",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}": {
      "delete": {
        "description": "Supprime définitivement un utilisateur du système. Un utilisateur ne peut pas se supprimer lui-même, et le dernier superadmin ne peut pas être supprimé.",
        "operationId": "delete_user_users__user_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Delete User Users  User Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur supprimé avec succès"
          },
          "400": {
            "description": "Vous ne pouvez pas vous supprimer vous-même ou autre interdiction de suppression"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Modification non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Supprimer un utilisateur",
        "tags": [
          "users"
        ]
      },
      "get": {
        "description": "Récupère les informations détaillées d'un utilisateur spécifique par son ID.",
        "operationId": "get_user_users__user_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Get User Users  User Id  Get",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur créé avec succès"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Permission insuffisante"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Obtenir un utilisateur",
        "tags": [
          "users"
        ]
      },
      "put": {
        "description": "Modifie les informations personnelles d'un utilisateur existant (nom, prénom, email, username).",
        "operationId": "update_user_users__user_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Update User Users  User Id  Put",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur mis à jour avec succès"
          },
          "400": {
            "description": "Mise à jour échouée"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Modification non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Mettre à jour les informations d'un utilisateur",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/groups": {
      "get": {
        "description": "Récupère la liste des groupes auxquels l'utilisateur appartient.",
        "operationId": "list_user_groups_users__user_id__groups_get",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List User Groups Users  User Id  Groups Get",
                  "type": "object"
                }
              }
            },
            "description": "Groupes récupérés"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Lecture non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Groupes du user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/organizations": {
      "get": {
        "description": "Récupère la liste des organisations auxquelles l'utilisateur est associé.",
        "operationId": "list_user_organizations_users__user_id__organizations_get",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List User Organizations Users  User Id  Organizations Get",
                  "type": "object"
                }
              }
            },
            "description": "Organisations récupérés"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Lecture non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Organisations du user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/password": {
      "put": {
        "description": "Permet à un utilisateur de changer son propre mot de passe ou à un administrateur de réinitialiser le mot de passe d'un autre utilisateur.",
        "operationId": "change_password_users__user_id__password_put",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Change Password Users  User Id  Password Put",
                  "type": "object"
                }
              }
            },
            "description": "Mot de passe mis à jour avec succès"
          },
          "400": {
            "description": "Mots de passe incorrects"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Modification non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Changer le mot de passe",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/policies": {
      "get": {
        "description": "Récupère la liste des policies directement associées à l'utilisateur.",
        "operationId": "list_user_policies_users__user_id__policies_get",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List User Policies Users  User Id  Policies Get",
                  "type": "object"
                }
              }
            },
            "description": "Policies récupérés"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Lecture non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Policies du user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/superadmin": {
      "put": {
        "description": "Permet à un superadmin de modifier le statut superadmin d'un autre utilisateur. Un superadmin ne peut pas modifier son propre statut, et le dernier superadmin ne peut pas être déclassé.",
        "operationId": "change_superadmin_users__user_id__superadmin_put",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSuperadmin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Change Superadmin Users  User Id  Superadmin Put",
                  "type": "object"
                }
              }
            },
            "description": "Utilisateur mis à jour avec succès"
          },
          "400": {
            "description": "Impossible de retirer le dernier superadmin"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Modification non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Modifier statut superadmin",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/tags": {
      "get": {
        "description": "Récupère la liste des tags associés à un utilisateur spécifique.",
        "operationId": "list_user_tags_users__user_id__tags_get",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response List User Tags Users  User Id  Tags Get",
                  "type": "object"
                }
              }
            },
            "description": "Tags récupérés"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Lecture non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Lister les tags d'un utilisateur",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/tags/{tag_id}": {
      "delete": {
        "description": "Retire un tag spécifique d'un utilisateur, supprimant ainsi la catégorisation ou les caractéristiques associées.",
        "operationId": "remove_tag_from_user_users__user_id__tags__tag_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Remove Tag From User Users  User Id  Tags  Tag Id  Delete",
                  "type": "object"
                }
              }
            },
            "description": "Tag retiré"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Suppression non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Dissocier un tag d'un utilisateur",
        "tags": [
          "users"
        ]
      },
      "post": {
        "description": "Ajoute un tag spécifique à un utilisateur pour le catégoriser ou lui attribuer des caractéristiques particulières.",
        "operationId": "add_tag_to_user_users__user_id__tags__tag_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "title": "Tag Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "summary": "Successful response",
                    "value": {
                      "data": {},
                      "message": "Operation completed successfully",
                      "status": "success"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Add Tag To User Users  User Id  Tags  Tag Id  Post",
                  "type": "object"
                }
              }
            },
            "description": "Tag ajouté"
          },
          "401": {
            "description": "Non authentifié"
          },
          "403": {
            "description": "Ajout non autorisée"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "error": {
                    "summary": "Client error",
                    "value": {
                      "detail": "Detailed error description",
                      "message": "Invalid request",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "summary": "Associer un tag à un utilisateur",
        "tags": [
          "users"
        ]
      }
    }
  },
  "security": [
    {
      "OAuth2PasswordBearerOrKey": []
    }
  ],
  "servers": [
    {
      "description": "Development server (local)",
      "url": "http://localhost:8010"
    }
  ],
  "tags": [
    {
      "description": "Operations for retrieval. Provides audit logging and system monitoring with 1 endpoint. (1 GET operations).",
      "name": "audit_logs"
    },
    {
      "description": "Operations for retrieval. Provides utility endpoints and testing with 1 endpoint. (1 GET operations).",
      "name": "coffee"
    },
    {
      "description": "Operations for retrieval, creation, modification, deletion. Provides infrastructure elements and resources with 7 endpoints. (2 DELETE, 2 GET, 2 POST, 1 PUT operations).",
      "name": "elements"
    },
    {
      "description": "Operations for retrieval, creation, modification, deletion. Provides environment configuration and deployment with 21 endpoints. (2 DELETE, 16 GET, 2 POST, 1 PUT operations).",
      "name": "environments"
    },
    {
      "description": "Operations for retrieval. Provides system functions and capabilities with 2 endpoints. (2 GET operations).",
      "name": "functions"
    },
    {
      "description": "Operations for retrieval, creation, modification, deletion. Provides user groups and permissions with 15 endpoints. (4 DELETE, 6 GET, 4 POST, 1 PUT operations).",
      "name": "groups"
    },
    {
      "description": "Operations for retrieval. Provides system health and status monitoring with 1 endpoint. (1 GET operations).",
      "name": "health"
    },
    {
      "description": "Operations for retrieval, creation, modification, deletion. Provides organization management and membership with 13 endpoints. (2 DELETE, 8 GET, 2 POST, 1 PUT operations).",
      "name": "organizations"
    },
    {
      "description": "Operations for retrieval, creation, modification, deletion. Provides access control policies and rules with 14 endpoints. (4 DELETE, 5 GET, 4 POST, 1 PUT operations).",
      "name": "policies"
    },
    {
      "description": "Operations for retrieval, creation, modification, deletion. Provides access control policies and rules with 4 endpoints. (1 DELETE, 1 GET, 1 POST, 1 PUT operations).",
      "name": "rules"
    },
    {
      "description": "Operations for retrieval, creation, deletion. Provides resource tagging and categorization with 9 endpoints. (1 DELETE, 7 GET, 1 POST operations).",
      "name": "tags"
    },
    {
      "description": "Operations for retrieval, creation, modification, deletion. Provides user management and authentication with 14 endpoints. (2 DELETE, 6 GET, 3 POST, 3 PUT operations).",
      "name": "users"
    }
  ]
}